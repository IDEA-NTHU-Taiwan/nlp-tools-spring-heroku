package com.figueroa.nlp;

import java.util.HashMap;

/**
 *
 * A class to represent a list of 540 stopwords with
 * some useful functions.
 *
 * @author Gerardo Figueroa
 * Institute of Information Systems and Applications
 * National Tsing Hua University
 * Hsinchu, Taiwan
 * January 2013
 */
public class Stopwords {

    private final static String[] stopwords = {
        "a",
        "able",
        "about",
        "above",
        "accordance",
        "according",
        "accordingly",
        "across",
        "act",
        "actually",
        "after",
        "afterwards",
        "again",
        "against",
        "al",
        "all",
        "almost",
        "alone",
        "along",
        "already",
        "also",
        "although",
        "always",
        "am",
        "among",
        "amongst",
        "an",
        "and",
        "another",
        "any",
        "anybody",
        "anyhow",
        "anymore",
        "anyone",
        "anything",
        "anyway",
        "anyways",
        "anywhere",
        "approximately",
        "are",
        "aren't",
        "as",
        "aside",
        "ask",
        "asking",
        "at",
        "away",
        "back",
        "be",
        "became",
        "because",
        "become",
        "becomes",
        "becoming",
        "been",
        "before",
        "beforehand",
        "begin",
        "beginning",
        "beginnings",
        "begins",
        "behind",
        "being",
        "believe",
        "beside",
        "besides",
        "between",
        "both",
        "brief",
        "briefly",
        "but",
        "by",
        "b",
        "came",
        "can",
        "cannot",
        "can't",
        "cause",
        "causes",
        "certain",
        "certainly",
        "come",
        "comes",
        "contain",
        "containing",
        "contains",
        "could",
        "couldn't",
        "date",
        "did",
        "didn't",
        "do",
        "doesn't",
        "doing",
        "done",
        "don't",
        "down",
        "downwards",
        "due",
        "during",
        "each",
        "either",
        "else",
        "elsewhere",
        "end",
        "ending",
        "enough",
        "especially",
        "et",
        "et al",
        "etc",
        "even",
        "ever",
        "every",
        "everybody",
        "everyone",
        "everything",
        "everywhere",
        "except",
        "far",
        "few",
        "fix",
        "followed",
        "following",
        "follows",
        "for",
        "former",
        "formerly",
        "found",
        "from",
        "further",
        "furthermore",
        "gave",
        "get",
        "gets",
        "give",
        "given",
        "gives",
        "giving",
        "go",
        "goes",
        "gone",
        "got",
        "gotten",
        "had",
        "happens",
        "hardly",
        "has",
        "hasn't",
        "have",
        "haven't",
        "having",
        "he",
        "hence",
        "her",
        "here",
        "hereafter",
        "hereby",
        "herein",
        "hereupon",
        "hers",
        "herself",
        "him",
        "himself",
        "his",
        "home",
        "how",
        "however",
        "i",
        "if",
        "i'll",
        "im",
        "immediate",
        "immediately",
        "importance",
        "important",
        "in",
        "inc",
        "indeed",
        "instead",
        "into",
        "inward",
        "is",
        "isn't",
        "it",
        "it'll",
        "its",
        "itself",
        "i've",
        "just",
        "keep",
        "keeps",
        "kept",
        "kg",
        "km",
        "know",
        "known",
        "knows",
        "largely",
        "last",
        "lately",
        "later",
        "latter",
        "latterly",
        "least",
        "less",
        "lest",
        "let",
        "lets",
        "like",
        "liked",
        "likely",
        "little",
        "look",
        "looking",
        "looks",
        "ltd",
        "made",
        "mainly",
        "make",
        "makes",
        "many",
        "may",
        "maybe",
        "me",
        "mean",
        "means",
        "meantime",
        "meanwhile",
        "merely",
        "mg",
        "might",
        "ml",
        "more",
        "moreover",
        "most",
        "mostly",
        "mr",
        "mrs",
        "much",
        "mug",
        "must",
        "my",
        "myself",
        "name",
        "namely",
        "near",
        "nearly",
        "necessarily",
        "necessary",
        "need",
        "needs",
        "neither",
        "never",
        "nevertheless",
        "next",
        "no",
        "nobody",
        "non",
        "none",
        "nonetheless",
        "nor",
        "normally",
        "not",
        "noted",
        "nothing",
        "now",
        "nowhere",
        "obtain",
        "obtained",
        "obviously",
        "of",
        "often",
        "old",
        "omitted",
        "on",
        "once",
        "one",
        "ones",
        "only",
        "onto",
        "or",
        "others",
        "otherwise",
        "ought",
        "our",
        "ours",
        "ourselves",
        "out",
        "outside",
        "over",
        "overall",
        "owing",
        "own",
        "paper",
        "part",
        "particular",
        "particularly",
        "past",
        "per",
        "perhaps",
        "placed",
        "please",
        "plus",
        "poorly",
        "possible",
        "possibly",
        "potentially",
        "predominantly",
        "present",
        "previously",
        "probably",
        "promptly",
        "proud",
        "provides",
        "put",
        "quickly",
        "quite",
        "ran",
        "rather",
        "readily",
        "really",
        "recent",
        "recently",
        "ref",
        "refs",
        "regarding",
        "regardless",
        "regards",
        "related",
        "relatively",
        "respectively",
        "resulted",
        "resulting",
        "results",
        "right",
        "run",
        "said",
        "same",
        "saw",
        "say",
        "saying",
        "says",
        "sec",
        "section",
        "see",
        "seeing",
        "seem",
        "seemed",
        "seeming",
        "seems",
        "seen",
        "self",
        "selves",
        "sent",
        "several",
        "shall",
        "she",
        "shed",
        "she'll",
        "shes",
        "should",
        "shouldn't",
        "show",
        "shown",
        "showns",
        "shows",
        "significant",
        "significantly",
        "similar",
        "similarly",
        "since",
        "slightly",
        "so",
        "some",
        "somebody",
        "somehow",
        "someone",
        "something",
        "sometime",
        "sometimes",
        "somewhat",
        "somewhere",
        "soon",
        "sorry",
        "specifically",
        "specified",
        "specify",
        "specifying",
        "still",
        "stop",
        "strongly",
        "sub",
        "substantially",
        "successfully",
        "such",
        "sufficiently",
        "suggest",
        "sure",
        "take",
        "taken",
        "taking",
        "tell",
        "tends",
        "than",
        "thank",
        "thanks",
        "that",
        "that'll",
        "thats",
        "that've",
        "the",
        "their",
        "theirs",
        "them",
        "themselves",
        "then",
        "thence",
        "there",
        "thereafter",
        "therefore",
        "therein",
        "there'll",
        "thereof",
        "thereto",
        "thereupon",
        "there've",
        "these",
        "they",
        "they'll",
        "they're",
        "they've",
        "think",
        "this",
        "those",
        "thou",
        "though",
        "through",
        "throughout",
        "thru",
        "thus",
        "til",
        "tip",
        "to",
        "together",
        "too",
        "took",
        "toward",
        "towards",
        "tried",
        "tries",
        "truly",
        "try",
        "trying",
        "twice",
        "under",
        "unfortunately",
        "unless",
        "unlike",
        "unlikely",
        "until",
        "unto",
        "up",
        "upon",
        "ups",
        "us",
        "use",
        "used",
        "useful",
        "usefully",
        "usefulness",
        "uses",
        "using",
        "usually",
        "various",
        "very",
        "via",
        "want",
        "wants",
        "was",
        "wasn't",
        "way",
        "we",
        "welcome",
        "we'll",
        "went",
        "were",
        "weren't",
        "we've",
        "what",
        "whatever",
        "what'll",
        "what's",
        "when",
        "whence",
        "whenever",
        "where",
        "whereafter",
        "whereas",
        "whereby",
        "wherein",
        "wheres",
        "whereupon",
        "wherever",
        "whether",
        "which",
        "while",
        "whim",
        "whither",
        "who",
        "who'd",
        "whoever",
        "whole",
        "who'll",
        "whom",
        "whomever",
        "who's",
        "whose",
        "why",
        "widely",
        "will",
        "willing",
        "wish",
        "with",
        "within",
        "without",
        "won't",
        "words",
        "wouldn't",
        "yes",
        "yet",
        "you",
        "you'd",
        "you'll",
        "your",
        "you're",
        "yours",
        "yourself",
        "yourselves",
        "you've"
    };
    // List of phrases that cannot be keyphrases by themselves but when combined with other words can become keyphrases
    private final static String[] stopPhrases = {
        "model",
        "data",
        "system",
        "method",
        "analysis",
        "process",
        "study",
        "function",
        "technique",
        "approach",
        "condition",
        "algorithm",
        "problem",
        "work",
        "experiment",
        "value",
        "techniqus",
        "application",
        "research",
        "result",
        "framework",
        "evaluation",
        "experimental data",
        "new approach",
        "new method",
        "proposed method",
        "proposed methodology",
        "case study",
        "previous work",};
    private HashMap<String, Integer> stopwordHashMap;
    private HashMap<String, Integer> stopPhraseHashMap;

    public Stopwords() {
        stopwordHashMap = new HashMap<String, Integer>(stopwords.length);
        for (int i = 0; i < stopwords.length; i++) {
            stopwordHashMap.put(stopwords[i], i);
        }

        stopPhraseHashMap = new HashMap<String, Integer>(stopPhrases.length);
        for (int i = 0; i < stopPhrases.length; i++) {
            stopPhraseHashMap.put(stopPhrases[i], i);
        }
    }

    public boolean isStopWord(String word) {
        word = word.toLowerCase();

        if (word.contains("http:") || word.contains("://")) {
            return true;
        }

        word = removePunctuations(word);
        if (stopwordHashMap.containsKey(word)) {
            return true;
        }
        else {
            return false;
        }
    }

    public boolean isStopPhrase(String word) {
        word = word.toLowerCase();

        if (stopPhraseHashMap.containsKey(word)) {
            return true;
        }
        else {
            return false;
        }
    }

    public String removeStopwords(String text) {
        String[] tokenizedText = text.split(" ");
        String newText = "";

        for (int i = 0; i < tokenizedText.length; i++) {
            String currToken = tokenizedText[i];

            if (!isStopWord(currToken)) {
                newText = newText.concat(currToken + " ");
            }
        }

        return newText;
    }

    private String removePunctuations(String text) {
        String cleanText = text.replaceAll("[^A-Za-z']", "");
        cleanText = cleanText.trim();
        return cleanText;
    }

    public boolean wordIsSignificant(String word, String posTag) {
        if (isStopWord(word)) {
            return false;
        }
        //if (Phrase.cleanText(word).length() < 3) {
        //    return false;
        //}
        String reducedWord = word.replaceAll("[a-zA-Z]", ""); // Remove all alphabetic characters
        if (reducedWord.length() == word.length()) {
            return false;   // If the two strings have the same length, it means the text didn't contain alphabetic characters
        }

        if (!(posTag.startsWith("NN") || posTag.startsWith("VBG") || posTag.startsWith("VBN") || posTag.startsWith("JJ"))) {
            return false;
        }

        return true;
    }
}
